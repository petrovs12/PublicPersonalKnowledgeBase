{"pageProps":{"note":{"id":"BOy4GLBQlse9SzjLAlwqp","title":"mics problems","desc":"","updated":1675413442485,"created":1641981602342,"custom":{},"fname":"science.CS.algos.mics problems","type":"note","vault":{"fsPath":"vault"},"contentHash":"78a75e57e39d8b082b412a0f522b8289","links":[{"type":"wiki","from":{"fname":"science.CS.algos.mics problems","id":"BOy4GLBQlse9SzjLAlwqp","vaultName":"vault"},"value":"tags.TODO","alias":"#TODO","position":{"start":{"line":5,"column":1,"offset":27},"end":{"line":5,"column":6,"offset":32},"indent":[]},"xvault":false,"to":{"fname":"tags.TODO"}},{"type":"wiki","from":{"fname":"science.CS.algos.mics problems","id":"BOy4GLBQlse9SzjLAlwqp","vaultName":"vault"},"value":"tags.TODO","alias":"#TODO","position":{"start":{"line":47,"column":1,"offset":1926},"end":{"line":47,"column":6,"offset":1931},"indent":[]},"xvault":false,"to":{"fname":"tags.TODO"}},{"type":"wiki","from":{"fname":"science.CS.algos.mics problems","id":"BOy4GLBQlse9SzjLAlwqp","vaultName":"vault"},"value":"tags.todo","alias":"#todo","position":{"start":{"line":240,"column":1,"offset":9069},"end":{"line":240,"column":6,"offset":9074},"indent":[]},"xvault":false,"to":{"fname":"tags.todo"}}],"anchors":{"least-common-ancestor":{"type":"header","text":"Least Common Ancestor","value":"least-common-ancestor","line":9,"column":0,"depth":1},"leetcode-507-perfect-number":{"type":"header","text":"Leetcode 507. Perfect Number","value":"leetcode-507-perfect-number","line":16,"column":0,"depth":1},"exclusive-time-of-functions":{"type":"header","text":"Exclusive time of Functions","value":"exclusive-time-of-functions","line":26,"column":0,"depth":1},"problem-1041-robot-bounded-in-circle":{"type":"header","text":"Problem 1041: Robot Bounded in Circle","value":"problem-1041-robot-bounded-in-circle","line":314,"column":0,"depth":1},"proof":{"type":"header","text":"Proof","value":"proof","line":330,"column":0,"depth":3},"problem-1463-cherry-pickup-ii":{"type":"header","text":"Problem 1463. Cherry Pickup II","value":"problem-1463-cherry-pickup-ii","line":334,"column":0,"depth":1},"solution":{"type":"header","text":"Solution:","value":"solution","line":350,"column":0,"depth":3},"1094-car-pooling":{"type":"header","text":"1094. Car Pooling","value":"1094-car-pooling","line":369,"column":0,"depth":2},"approach-2-bucket-sort":{"type":"header","text":"Approach 2: Bucket Sort","value":"approach-2-bucket-sort","line":426,"column":0,"depth":3},"intuition":{"type":"header","text":"Intuition","value":"intuition","line":427,"column":0,"depth":5},"":{"type":"header","text":"","value":"","line":442,"column":0,"depth":2},"131-palindrome-partitioning":{"type":"header","text":"131. Palindrome Partitioning","value":"131-palindrome-partitioning","line":445,"column":0,"depth":2},"solution-1":{"type":"header","text":"Solution","value":"solution-1","line":466,"column":0,"depth":4},"1762-buildings-with-an-ocean-view":{"type":"header","text":"1762. Buildings With an Ocean View","value":"1762-buildings-with-an-ocean-view","line":515,"column":0,"depth":2},"1891-cutting-ribbons":{"type":"header","text":"1891. Cutting Ribbons","value":"1891-cutting-ribbons","line":566,"column":0,"depth":2},"lc-4-median-of-two-sorted-arrays":{"type":"header","text":"Lc 4 Median of Two Sorted Arrays","value":"lc-4-median-of-two-sorted-arrays","line":595,"column":0,"depth":1},"lc-1071-gcd-of-strings":{"type":"header","text":"LC 1071. GCD of strings","value":"lc-1071-gcd-of-strings","line":617,"column":0,"depth":1},"verify-alien-dictionary":{"type":"header","text":"verify alien dictionary","value":"verify-alien-dictionary","line":631,"column":0,"depth":1}},"children":[],"parent":"R3N3tS0RNCjMvqnqSnGZI","data":{}},"body":"<h1 id=\"mics-problems\">mics problems<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mics-problems\"></a></h1>\n<h1 id=\"least-common-ancestor\">Least Common Ancestor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#least-common-ancestor\"></a></h1>\n<p><a class=\"color-tag\" style=\"--tag-color: #fbdd7e;\" href=\"/PublicPersonalKnowledgeBase/notes/vYWCmlO6WVQQZUTowUlHT\">#TODO</a> </p>\n<p><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/\">Read this and rephrase solution</a></p>\n<h1 id=\"leetcode-507-perfect-number\">Leetcode 507. Perfect Number<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#leetcode-507-perfect-number\"></a></h1>\n<p>A perfect number is a number that is equal to the sum of its positive divisors, excluding the number itself.\nlet <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> is a number.\nLet's think about <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">n=kl</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span> then sm(kl)=sm(k)<em>sm(l)+k+l (?).\nExample:\n$sm(4) = sm(2)</em>sm(2)+2$</p>\n<h1 id=\"exclusive-time-of-functions\"><a href=\"https://leetcode.com/problems/exclusive-time-of-functions/\">Exclusive time of Functions</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exclusive-time-of-functions\"></a></h1>\n<ul>\n<li>Process logs in order and put them in a stack</li>\n<li>'start' log is opening bracket</li>\n<li>we keep 'time wasted' variable, initialized at 0. It is always re-initializied at 0 whenever the stack is empty. So the 'slate is clean'</li>\n<li>'end' log is closing bracket. If we get an end log, then the previous one is it's 'start' counterpart. Record time <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>−</mo><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>W</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">time(end)+1-time(start)-timeWasted</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">Wa</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span></span></span></span></span> for this process in the array.\nReason for the timeWasted is this time was actually used up by other processes and accounted for already. Reason for +1 is just the way the problem does the bookkeeping, i.e. start 1 means 'start at BEGINNING of period 1', while end 2 means 'end at END of period 2'.\nWe then re-initialize timeWasted as simply <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>e</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">time(end)-time(start)+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">im</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span> is stack is non-empty ans <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> is stack is empty.</li>\n<li>O(n) time, O(n) space</li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/custom-sort-string/\">Custom Sort String</a></p>\n<p>We're given 2 strings, 1 of the order and 1 of the actual string. have to re-sort the actual string like the order is sorted.</p>\n<pre><code>Input: order = \"cba\", s = \"abcd\"\nOutput: \"cbad\"\n\n</code></pre>\n<p>Use a Counter to represent the actual string and re-build from scratch in an obvious way.\nneed also a <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span></span></span></span></span> to hold the chars in the string, but not\nin the order.</p>\n<p><a href=\"https://leetcode.com/problems/custom-sort-string/discuss/1704409/Python-3-solutions-(hashmap-lambda-in-sort-and-Topological-sort)\">Toposort solution also possible, check it out.</a></p>\n<p><a class=\"color-tag\" style=\"--tag-color: #fbdd7e;\" href=\"/PublicPersonalKnowledgeBase/notes/vYWCmlO6WVQQZUTowUlHT\">#TODO</a> </p>\n<p><a href=\"https://leetcode.com/problems/balance-a-binary-search-tree/\">Balance a Binary Search Tree</a></p>\n<p>Algorithm:</p>\n<ul>\n<li>Build a sorted array via in-order (left,top,right) traversal of the tree.</li>\n<li>Re-build a new tree from the array.</li>\n</ul>\n<pre class=\"language-{python}\"><code class=\"language-{python}\"># Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        # step 1: build arr via in-order traversal\n        arr = []\n        \n        def dfs(nd):\n            if not nd:\n                return\n            dfs(nd.left) #left\n            arr.append(nd.val)# root \n            dfs(nd.right)# right\n        dfs(root)\n        print(f\"{arr=}\")# check\n        assert sorted(arr) == arr # check\n\n        # step 2: re-build tree recursively from arr\n        n= len(arr)\n        # take care for off-by-one errors\n        def build(lo=0,hi= n):\n            if lo>=hi:\n                return None\n            else:\n                mid = (lo+hi)//2\n                curr = TreeNode(arr[mid])\n                curr.left = build(lo=lo,hi=mid)\n                curr.right = build(lo=mid+1,hi=hi)\n                \n                return curr\n        return build()\n            \n</code></pre>\n<p><a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/submissions/\">Shortest Path in Binary Matrix</a>.</p>\n<p>Simple BFS. Maybe can use A* to be fast but idk.</p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\">class Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        # idea:\n        # use bfs\n        m = len(grid)\n        n = len(grid[0])\n        def getNeighbors(cell): #O(1)\n            i,j = cell[0],cell[1]\n            return [(i+k,j+l) for k in range(-1,2) for l in range(-1,2) if \n                   abs(k)+abs(l)>=1 and 0&#x3C;=k+i&#x3C;m and 0&#x3C;=j+l&#x3C;n \n                    and grid[i+k][j+l]==0\n                   ]\n        if (grid[0][0]!=0) or (grid[m-1][n-1]!=0):\n            #print(f\"no end or beginning,{grid[0][0]=},{grid[m-1][n-1]=}\")\n            return -1\n        # note: when we see a cell, we never need to update the distance to it!!\n        from queue import deque\n        q = deque()\n        seen = dict()\n        q.append(((0,0),1))\n        while q:\n            cell,dist = q.popleft()\n            if cell in seen:\n                continue\n            else:\n                seen[cell]=dist\n            potentialNeighbors=getNeighbors(cell)\n           # print(f\"{cell=},{potentialNeighbors=}\")\n            for nb in potentialNeighbors:\n                if nb==(n-1,m-1):\n                    return dist+1\n                if nb not in seen:\n                    q.append((nb,dist+1))\n                \n            \n            \n        if (m-1,n-1) in seen:\n            return seen[(m-1,n-1)]\n        else:\n            return -1\n</code></pre>\n<p><a href=\"https://leetcode.com/problems/employee-free-time/\">Employee Free Time</a></p>\n<p>Employee free time problem:</p>\n<p>We are given a list schedule of employees, which represents the working time for each employee.</p>\n<p>Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.</p>\n<p>Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.</p>\n<p>Solution:\nstart w/ free interval <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-\\infty,\\infty)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span></span>. Make a priority queue of intervals from teh emp schedule list.\nRepeadedly choose the employee schedule item w/ the earliest start time..\nThen:</p>\n<ul>\n<li>\n<p>if the end time of the current interval is less than the start time of the current free interval, do nothing </p>\n</li>\n<li>\n<p>if the end time of the current free interval is smaller than the start tiem of employe interval, add current to solution, re-initialize new to point to end time of employee</p>\n</li>\n<li>\n<p>if overlap with emp.start&#x3C; current.start, then update current.start to emp.end. If needed, update current.end as well</p>\n</li>\n<li>\n<p>if overlap with emp.start>current.start, can add\n(current.start,emp.start)  to solution and update current to start at emp.end. The end <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span></span> if emp.end> current.end, else current.end.</p>\n</li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/the-skyline-problem/\">Skyline</a></p>\n<p>Approach - put all buildings in a priority queue, sorted by start time. Bellow instructions skip some corner cases, as they are very verbose (but are in code).</p>\n<ul>\n<li>\n<p>Initialize 'current' as <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-\\infty,\\infty,0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span></span></span></span></span> (the default building), sky(result) to empty list.</p>\n</li>\n<li>\n<p>Pop the queue. Call this proc. If current.end &#x3C; proc.start,\nadd current to skyline. if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo>&#x3C;</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo>&#x3C;</mo><mo>=</mo><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">current.start &#x3C; proc.start&#x3C;=current.end</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6542em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8095em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roc</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span></span></span></span></span>, then :</p>\n</li>\n<li>\n<p>if current.height > proc.height, update start of proc to be <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi>n</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">current.end</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span></span></span></span></span>, and add back to queue.</p>\n</li>\n<li>\n<p>if <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>&#x3C;</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">current.height&#x3C;proc.height</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roc</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span></span> , add current to skyline, check if need to add <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi>n</mi><mi>d</mi><mo separator=\"true\">,</mo><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo separator=\"true\">,</mo><mi>c</mi><mi>u</mi><mi>r</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">proc.end,current,start,current.height</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">roc</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">rre</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span></span> to queue.</p>\n</li>\n<li>\n<p>in the end add the last one if needed.</p>\n<p> Be careful with corner cases, e.g. when 2 heights are the same, with deleting the first dummy building, and adding the last building if needed. </p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\">from heapq import heappop, heappush\nclass Solution:\n   def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n       # make a priority q w/ all buildings. We\n       q = []\n       for b in buildings:\n           heappush(q,b)\n       res = []\n       # start, end, height\n       current = [float(\"-inf\"),float(\"inf\"),0]\n       while q:\n           proc = heappop(q)\n           s,e,h = proc[0],proc[1],proc[2]\n           if s>current[1]:\n               \n               res.append([current[0],current[2]])# finalize a 'current'\n               current = [s,e,h]\n           if s==current[1]:\n               # case 1:\n               # if heights are different:\n               if h!=current[2]:\n                   res.append([current[0],current[2]])# finalize a 'current'\n                   current = [s,e,h]\n               else:\n                   current[1] = e\n                   continue\n                   \n           else:\n               # the new one is higher:\n               if current[2]&#x3C;h:\n                   if  current[0]&#x3C;s:\n                       res.append([current[0],current[2]])\n                   \n                   if current[1]>e:# if old one continues after current one, add it back to queue\n                       heappush(q,[e,current[1],current[2]])\n                   else:# do nothing, it will be swallowed\n                       pass\n                   current = [s,e,h]\n                   \n               # same height\n               elif current[2]==h:# update end time of current\n                   current[1] = max(e,current[1])\n               else:# old one is higher\n                   if e>current[1]:\n                       heappush(q,[current[1],e,h])\n       # notice we only add stuff after finishing the processing, so we'll be left\n       # with somethign to add in the end\n       if current[0]>res[-1][0]:\n           res.append([current[0],current[2]])\n       res2 = []\n       for r in res[1:]:\n           if not res2 or r[1]!=res2[-1][1]:\n               res2.append(r)\n       return res2\n                   \n                   \n               \n           \n       \n</code></pre>\n</li>\n</ul>\n<p><a class=\"color-tag\" style=\"--tag-color: #9e0168;\" href=\"/PublicPersonalKnowledgeBase/notes/vYWCmlO6WVQQZUTowUlHT\">#todo</a> check tree and stuff </p>\n<p><a href=\"https://leetcode.com/problems/longest-increasing-path-in-a-matrix/\">Longest Increasing Path in Matrix</a></p>\n<p>Approach:\nfirst do topo-sort in order to 'linearize' the graph.\nThen do a DFS from each node, and keep track of the max path length, memoizing the DP calls.</p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\">from functools import lru_cache\n\nclass Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        # first step-topological sort to find potential roots\n        st = []\n        m = len(matrix)\n        n = len(matrix[0])\n        def getNeighbors(cell):\n            i,j = cell[0], cell[1]\n            return [(i+k,j+l) for k in range(-1,2) for l in range(-1,2)\n                   if 0&#x3C;=i+k&#x3C;m and 0&#x3C;=j+l&#x3C;n and abs(k)+abs(l) ==1 \n                    and matrix[i][j]&#x3C;matrix[i+k][j+l]\n                   \n                   ]\n        st = []\n        seen = set()\n        #totBest = 0\n        from collections import defaultdict\n        bestWalk = defaultdict( lambda :1)\n        \n        def walk(nd):\n           # print(f\"walking {nd=}\")\n            if nd in seen:\n                return\n            seen.add(nd)\n            for nb in getNeighbors(nd):\n                #print(f\"{nd=},{nb=}\")\n                walk(nb)\n            st.append(nd)\n            return\n        \n        #print(st)\n        for i in range(m):\n            for j in range(n):\n                walk((i,j))\n        #print(st)\n        \n        @lru_cache(maxsize = None)\n        def dpwalk(node):\n            #curr = 1\n            best = 1\n            for nb in getNeighbors(node):\n               # print(f\"{node=},{nb=}\")\n                k= dpwalk(nb)\n                best = max(best,k+1)\n            return best\n        \n        bestFound = 1\n        for el in st[-1::-1]:\n            bestFromHere = dpwalk(el)\n            #print(f\"{el=},{bestFromHere=}\")\n            bestFound= max(bestFound,bestFromHere)\n            \n        \n        return bestFound\n</code></pre>\n<h1 id=\"problem-1041-robot-bounded-in-circle\">Problem 1041: Robot Bounded in Circle<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#problem-1041-robot-bounded-in-circle\"></a></h1>\n<p>  On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:</p>\n<ul>\n<li>\"G\": go straight 1 unit;</li>\n<li>\"L\": turn 90 degrees to the left;</li>\n<li>\"R\": turn 90 degrees to the right.</li>\n</ul>\n<p>The robot performs the instructions given in order, and repeats them forever.</p>\n<p>Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>\n<p>Let <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> be the vector we move the robot in one instruction set, and <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span></span> be the direction in radians, relative to the initial direction of the robot.</p>\n<p>Solution/ answer:\nAfter 1 instruction set we're either at the origin, or we're <strong>not</strong> facing north.</p>\n<h3 id=\"proof\">Proof<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#proof\"></a></h3>\n<p>Exercise for reader.</p>\n<h1 id=\"problem-1463-cherry-pickup-ii\">Problem 1463. Cherry Pickup II<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#problem-1463-cherry-pickup-ii\"></a></h1>\n<p>You are given a rows x cols matrix grid representing a field of cherries where <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">grid[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></span>\nrepresents the number of cherries that you can collect from the <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i, j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></span> cell.</p>\n<p>You have two robots that can collect cherries for you:</p>\n<p>Robot #1 is located at the top-left corner (0, 0), and\nRobot #2 is located at the top-right corner (0, cols - 1).\nReturn the maximum number of cherries collection using both robots by following the rules below:</p>\n<p>From a cell (i, j), robots can move to cell <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext>or </mtext><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i + 1, j - 1), (i + 1, j), \\text{or } (i + 1, j + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">or </span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span>.\nWhen any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\nWhen both robots stay in the same cell, only one takes the cherries.\nBoth robots cannot move outside of the grid at any moment.\nBoth robots should reach the bottom row in grid.</p>\n<h3 id=\"solution\">Solution:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution\"></a></h3>\n<p>Let D(col1,col2,row) be the maximum number of cherries that can be collected if the robots are at\n<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>w</mi><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><mi>l</mi><mn>1</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>w</mi><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><mi>l</mi><mn>2</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(row,col1),(row,col2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span></span>.\nThen:</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>D</mi><mo stretchy=\"false\">(</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>c</mi><msub><mi>n</mi><mn>1</mn></msub><mo>∈</mo><mo stretchy=\"false\">[</mo><msub><mi>c</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>c</mi><msub><mi>n</mi><mn>2</mn></msub><mo>∈</mo><mrow><msub><mi>c</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow></mrow></munder><mi>D</mi><mo stretchy=\"false\">(</mo><mi>c</mi><msub><mi>n</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>c</mi><msub><mi>n</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">[</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">[</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mtext> if </mtext><msub><mi>c</mi><mn>1</mn></msub><mo stretchy=\"false\">!</mo><mo>=</mo><msub><mi>c</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>g</mi><mi>r</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">[</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo><mtext> else </mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">D(c_1,c_2,r) = \\max_{cn_1 \\in [c_1-1,c_1,c_1+1],cn_2\\in {c_2-1,c_2,c_2+1}} D(cn_1,cn_2,r+1) +\\begin{cases} grid[c_1,r]+grid[c_2,r] \\text{ if } c_1!=c_2\\\\ grid[c_1,r] \\text{ else } \\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.716em;vertical-align:-0.966em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4306em;\"><span style=\"top:-2.309em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\">∈</span><span class=\"mopen mtight\">[</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">max</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.966em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mord text\"><span class=\"mord\"> if </span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span><span class=\"mord text\"><span class=\"mord\"> else </span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<p>The solution is then <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">D(0,n-1,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>With the obvious boundary conditions. We use memoization table to store the results .A small optimization we could use is to make sure <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>&#x3C;</mo><mo>=</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">c_1&#x3C;=c_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> troughout the execution of the algorithm.</p>\n<h2 id=\"1094-car-pooling\">1094. Car Pooling<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1094-car-pooling\"></a></h2>\n<p>There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p>\n<p>You are given the integer capacity and an array trips where trip[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.</p>\n<p>Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.</p>\n<p>Example 1:</p>\n<pre><code>Input: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false\n</code></pre>\n<p>Example 2:</p>\n<pre><code>Input: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true\n</code></pre>\n<p>Solution:\nwe simply merge all intervals and keep track if the capacity is enough.</p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\">class Solution:\n    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:\n        from collections import defaultdict\n        # aggregate pickups and dropoffs at any time something happens'\n        pickups = defaultdict(lambda :0)\n        dropoffs = defaultdict(lambda :0)\n        for t in trips:\n            pickups[t[1]]+=t[0]\n            dropoffs[t[2]]+=t[0]\n        # sort !! NB- this step is important, BUT if we have limited numbers\n        # we can use bucket sort for linear time!!!\n        pickupsAndDropoffs = sorted(\n            list(\n                set(\n                    [t[1] for t in trips]+[t[2] for t in trips]\n                )\n            ))\n        currOcc = 0\n        for t in pickupsAndDropoffs:\n            if t in pickups:\n                currOcc+=pickups[t]\n            if t in dropoffs:\n                currOcc-=dropoffs[t]\n            assert currOcc>=0\n            if currOcc>capacity:\n                return False\n        return True\n                                    \n</code></pre>\n<h3 id=\"approach-2-bucket-sort\">Approach 2: Bucket Sort<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#approach-2-bucket-sort\"></a></h3>\n<h5 id=\"intuition\">Intuition<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#intuition\"></a></h5>\n<p>Note that in the problem there is a interesting constraint:</p>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>&#x3C;</mo><mo>=</mo><mi>t</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&#x3C;</mo><mi>t</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>&#x3C;</mo><mo>=</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">0 &#x3C;= trips[i][1] &#x3C; trips[i][2] &#x3C;= 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6835em;vertical-align:-0.0391em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1000</span></span></span></span></span>\nWhat pops into the mind is Bucket Sort, which is a sorting algorithm in <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></span> time but requires some prior knowledge for the range of the data.</p>\n<p>We can use it instead of the normal sorting in this method.</p>\n<p>What we do is initial 1001 buckets, and put the number of passengers changed in corresponding buckets, and collect the buckets one by one.</p>\n<p>Algorithm</p>\n<p>We will initial 1001 buckets, iterate trip, and save the number of passengers changed at i mile in the i-th bucket.</p>\n<h2 id=\"\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#\"></a></h2>\n<h2 id=\"131-palindrome-partitioning\">131. Palindrome Partitioning<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#131-palindrome-partitioning\"></a></h2>\n<p><em>Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.</em></p>\n<pre><code>Example 1:\n\nInput: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\nExample 2:\n\nInput: s = \"a\"\nOutput: [[\"a\"]]\n \n\nConstraints:\n\n1 &#x3C;= s.length &#x3C;= 16\ns contains only lowercase English letters.\n</code></pre>\n<h4 id=\"solution-1\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution-1\"></a></h4>\n<p>Given that we're being asked to return everything, we can use backtracking to solve this problem. We also note the maximum possible length of the string is 16,\nwhich is small enough to do a brute force search.</p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\">def isPalindrome(a):\n    return a==a[-1::-1]\ndef findPossiblePalindromesStartingFromBeginning(s):\n    res = []\n    if len(s)==0:\n        return res\n    for i in range(0,len(s)):\n        if isPalindrome(s[:i+1]):\n            res.append(s[:i+1])\n    return res\n        \n            \n            \n    \nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        res = []\n        n = len(s)\n        \n        def backtrack(partialResult,currInd):\n            #print(f\"{partialResult=},{currInd=}\")\n            if currInd >n:\n            #    pass\n                return\n            elif currInd == n:\n                print(\"adding\")\n                res.append(partialResult.copy())\n                return\n            else:\n                possibleContinuations = [(len(c),c) for c in findPossiblePalindromesStartingFromBeginning(s[currInd:])]\n                print(possibleContinuations)\n                for ind,c in possibleContinuations:\n                    # partialResult.append(c)\n                    backtrack(partialResult+[c],currInd+ind)\n                    \n            #partialResult.pop(-1)\n            return res\n        return backtrack([],0)\n            \n                \n</code></pre>\n<h2 id=\"1762-buildings-with-an-ocean-view\">1762. Buildings With an Ocean View<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1762-buildings-with-an-ocean-view\"></a></h2>\n<p>There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.</p>\n<p>The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.</p>\n<p>Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.</p>\n<p>Example 1:</p>\n<pre><code>Input: heights = [4,2,3,1]\nOutput: [0,2,3]\n</code></pre>\n<p>Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\nExample 2:</p>\n<p>Input: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.\nExample 3:</p>\n<p>Input: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.</p>\n<p>Constraints:</p>\n<p>1 &#x3C;= heights.length &#x3C;= 105\n1 &#x3C;= heights[i] &#x3C;= 109</p>\n<p>it's a bit slow cause of the appending, but can be fixed by instead starting from the the beginning\nand maintaining a monotonously decreasing sequence- every time we add an element,\nit deletes all elements already in the stack that have smaller height already (we keep the index in the stack and check heights dynamically) .\nFinally return the stack.</p>\n<pre><code>class Solution:\n    def findBuildings(self, heights: List[int]) -> List[int]:\n        maxToRight = float(\"-inf\")\n        n = len(heights)\n        res = []\n        for i in range(n-1,-1,-1):\n            if heights[i]>maxToRight:\n                res.append(i)\n                maxToRight = heights[i]\n        return res[-1::-1]\n</code></pre>\n<h2 id=\"1891-cutting-ribbons\">1891. Cutting Ribbons<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1891-cutting-ribbons\"></a></h2>\n<p>You are given an integer array ribbons, where ribbons[i] represents the length of the ith ribbon, and an integer k. You may cut any of the ribbons into any number of segments of positive integer lengths, or perform no cuts at all.</p>\n<p>For example, if you have a ribbon of length 4, you can:\nKeep the ribbon of length 4,\nCut it into one ribbon of length 3 and one ribbon of length 1,\nCut it into two ribbons of length 2,\nCut it into one ribbon of length 2 and two ribbons of length 1, or\nCut it into four ribbons of length 1.\nYour goal is to obtain k ribbons of all the same positive integer length. You are allowed to throw away any excess ribbon as a result of cutting.</p>\n<p>Return the maximum possible positive integer length that you can obtain k ribbons of, or 0 if you cannot obtain k ribbons of the same length.</p>\n<pre><code>Example 1:\n\nInput: ribbons = [9,7,5], k = 3\nOutput: 5\nExplanation:\n- Cut the first ribbon to two ribbons, one of length 5 and one of length 4.\n- Cut the second ribbon to two ribbons, one of length 5 and one of length 2.\n- Keep the third ribbon as it is.\n</code></pre>\n<p>Now you have 3 ribbons of length 5.</p>\n<h1 id=\"lc-4-median-of-two-sorted-arrays\">Lc 4 Median of Two Sorted Arrays<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lc-4-median-of-two-sorted-arrays\"></a></h1>\n<p>Probably have to do it quickly...\nlet's try 'binary search' approach.\nThe median is the 50th pctile...</p>\n<pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_order_statistic</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span>arr2<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    m <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># corner cases- m or n =0, k = 0, </span>\n    <span class=\"token comment\"># k = m,k = n</span>\n    <span class=\"token comment\"># then</span>\n    a1 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">[</span>k<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    a2 <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">[</span>k<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#then make 2 cuts as follows:</span>\n    \n</code></pre>\n<h1 id=\"lc-1071-gcd-of-strings\">LC 1071. GCD of strings<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lc-1071-gcd-of-strings\"></a></h1>\n<p>string 'division with reminder?'</p>\n<p> is it 'just take the common prefix'?\nno, actually the solution is quite fun:</p>\n<pre class=\"language-{python}\"><code class=\"language-{python}\"># note that thegdc is non-empty iff a+b = b+a\n# so we can just check if a+b = b+a\n# and take the a[gdc(len(a),len(b)):] as the answer\n\nreturn a[gdc[len(a),len(b)]:] if a+b == b+a else \"\"\n</code></pre>\n<h1 id=\"verify-alien-dictionary\">verify alien dictionary<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#verify-alien-dictionary\"></a></h1>\n<p>learend about itertools zip_longest.</p>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1647507231129,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"db285659ccac8b133c384de1ef51de66","links":[],"anchors":{"welcome-to-stefans-notes":{"type":"header","text":"Welcome to Stefan's Notes!","value":"welcome-to-stefans-notes","line":7,"column":0,"depth":1}},"children":["mxzxxu8z4e6krz99ht96y9d","W1EOZ27Tqx6RbiA2aW3DI","DyoLE2kwm9rRfRZhBGxPW","idhfogizmtcmvaamtalp3o3","4w8wBCSRvYUnGIZeozW03","vB321AipYCs6ldVC0APs9","h6WVdl1UTWVXeWuMJSZ1f","bth6m0exy9q9loxib1mc4al","4abAmH56ausbldEJbZokx","JyOFJ5NTPSVWMfiDy951X","0OO7fjCpcaGZg5qDRZr8z","138666663","pohXgII67dAxnoufG7yAP","6hs48bnjnaoxahk07exj74u","42r6290iqzLPmg9BY7fIp","3hoLerNJHjNkDziIKlFF2","T6meT3UNw0nRorEbzoPSl","hIOTXIIBj3vmhG1xc91lA","tnFlQuOAGPkbU2fZI7Cb1","Jb3w3f4x8kixLhrjUW6S1","LV6q5jlD2xtCF6yYFEqFC","ENDcCZFjAW9h66eDoFg7I","b5IeREnsTbeggC7rmWV0p","2hmbhdzcdljtdwln762gcrv","z9la6u9t3xueldj2omf2gc6","9akeo93l6b026jmu4t6e7pw","sc24o4jglr9jg29qr5v0e44","0mt5ao8tbbz3z5mdwe0aer8","r7rvb6nal69nfb6ogqdadnm","xujx5iuxskj10o0ajpi109n","lyl1rzqz6zwcswpwh0kafrm","skpw697vlqdq3t3uqxpq5e3","a4tts3oc3oms7wuralrbzdc","13a1ufqh6o8yi9evw1u5kv5"],"parent":null,"data":{},"body":"# Welcome to Stefan's Notes!\n\n        \n\nLast updated: 2021.12.30\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/PublicPersonalKnowledgeBase","siteUrl":"https://petrovs12.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}