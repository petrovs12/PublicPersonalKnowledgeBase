{"pageProps":{"note":{"id":"r1gqvv3d6p1okyz1rc0i68f","title":"Designing Data Intensive Applications","desc":"","updated":1656588327473,"created":1646778662999,"custom":{},"fname":"engineering.system_design.Designing Data Intensive Applications","type":"note","vault":{"fsPath":"vault"},"contentHash":"81b39778e9ba5e27b23cb277f871c9dd","links":[{"type":"wiki","from":{"fname":"engineering.system_design.Designing Data Intensive Applications","id":"r1gqvv3d6p1okyz1rc0i68f","vaultName":"vault"},"value":"science.CS.algos.Data Structures.Bloom Filters","position":{"start":{"line":9,"column":22,"offset":231},"end":{"line":9,"column":72,"offset":281},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"science.CS.algos.Data Structures.Bloom Filters"}},{"type":"wiki","from":{"fname":"engineering.system_design.Designing Data Intensive Applications","id":"r1gqvv3d6p1okyz1rc0i68f","vaultName":"vault"},"value":"engineering.system_design.Caching.Redis and Memcached","position":{"start":{"line":71,"column":1,"offset":2332},"end":{"line":71,"column":58,"offset":2389},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"engineering.system_design.Caching.Redis and Memcached"}}],"anchors":{"storage-and-retrieval":{"type":"header","text":"Storage and Retrieval","value":"storage-and-retrieval","line":10,"column":0,"depth":1},"hash-indices":{"type":"header","text":"Hash indices","value":"hash-indices","line":16,"column":0,"depth":2},"apend-split-into-segments":{"type":"header","text":"Apend, split into segments","value":"apend-split-into-segments","line":26,"column":0,"depth":2},"sstables-and-lsm-trees":{"type":"header","text":"SSTables and LSM trees","value":"sstables-and-lsm-trees","line":29,"column":0,"depth":1},"merge-and-compact":{"type":"header","text":"Merge and compact","value":"merge-and-compact","line":40,"column":0,"depth":3},"b-tree-indices":{"type":"header","text":"B-tree indices","value":"b-tree-indices","line":48,"column":0,"depth":1},"summary":{"type":"header","text":"Summary","value":"summary","line":56,"column":0,"depth":1},"secondary-keys":{"type":"header","text":"Secondary keys","value":"secondary-keys","line":60,"column":0,"depth":1},"multi-dimensional-indices":{"type":"header","text":"Multi-dimensional indices","value":"multi-dimensional-indices","line":65,"column":0,"depth":1},"latitude-and-longitude":{"type":"header","text":"Latitude and longitude","value":"latitude-and-longitude","line":66,"column":0,"depth":2},"in-memory-databases":{"type":"header","text":"In-memory databases","value":"in-memory-databases","line":75,"column":0,"depth":1}},"children":[],"parent":"gImPQvOVGCsqgPnkpuVfC","data":{}},"body":"<h1 id=\"designing-data-intensive-applications\">Designing Data Intensive Applications<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#designing-data-intensive-applications\"></a></h1>\n<p>These are nots from the Designing Data Intensive Applications book.</p>\n<h1 id=\"storage-and-retrieval\">Storage and Retrieval<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#storage-and-retrieval\"></a></h1>\n<p>Big difference between storage engines, optimized for analytics, and ones optimized for transactional workloads.</p>\n<p>one can use auxilary <a href=\"/PublicPersonalKnowledgeBase/notes/DGlamf8n85vZa7s6JE1TG\">Bloom Filters</a> in cases where not finding key would take long time.</p>\n<h2 id=\"hash-indices\">Hash indices<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hash-indices\"></a></h2>\n<p>Keep the offset</p>\n<ul>\n<li>only append to file</li>\n<li>tombstone is a special value, indicating that the key is deleted</li>\n<li>to optimize:\nuse fixed- size segments, periodically compact (removing duplicates) and merge them </li>\n</ul>\n<p>Limitations: no range queries.</p>\n<h2 id=\"apend-split-into-segments\">Apend, split into segments<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#apend-split-into-segments\"></a></h2>\n<p>keep segments sorted, compactify segments.</p>\n<h1 id=\"sstables-and-lsm-trees\">SSTables and LSM trees<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sstables-and-lsm-trees\"></a></h1>\n<p>Require that the sequence of key value records is sorted by key always.\nIn-memory memtable, implemented as self-balancing tree.\nWhen grows, write it to disk as a segment.</p>\n<p>Find record: </p>\n<ol>\n<li>try the memtable.</li>\n<li>if not found, try the disk segments in order of recency.</li>\n</ol>\n<p>Handle crash by writing simultaneously to disk as well as the memtable.</p>\n<h3 id=\"merge-and-compact\">Merge and compact<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#merge-and-compact\"></a></h3>\n<p>On schedule, compact and merge the disk segments.</p>\n<p>This is how lucene works, roughly.</p>\n<p><strong>Range queries </strong> are supported ,as keys are kept sorted.</p>\n<h1 id=\"b-tree-indices\">B-tree indices<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-tree-indices\"></a></h1>\n<p>B-trees are much more wildly used than lsm trees, but latter are promising.</p>\n<p>Very similar to other balanced trees</p>\n<h1 id=\"summary\">Summary<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#summary\"></a></h1>\n<p> LSM trees might be faster to write, as it's just sequential writes...\nLook at pages 82-83 of the book.</p>\n<h1 id=\"secondary-keys\">Secondary keys<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#secondary-keys\"></a></h1>\n<p> they are not unique, but crucial for performance of joins and such.\ncan append row id to the row to make it unique and use either b-tree or lsm tree. Another way is to make the values lists of matching row identifiers.</p>\n<h1 id=\"multi-dimensional-indices\">Multi-dimensional indices<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#multi-dimensional-indices\"></a></h1>\n<h2 id=\"latitude-and-longitude\">Latitude and longitude<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#latitude-and-longitude\"></a></h2>\n<p> in a geographical ocntext, we would like to see all locations within a lat-lon grid...</p>\n<p> One option is to translate a two-dimensional location into a single number using a <strong>space-filling curve</strong>, and then to use a regular B-tree index [28]. More commonly, spe‐\ncialized spatial indexes such as R-trees are used. For example, PostGIS implements\ngeospatial indexes as R-trees using PostgreSQL’s Generalized Search Tree indexing\nfacility [29]. We don’t have space to describe R-trees in detail here, but there is plenty\nof literature on them.</p>\n<h1 id=\"in-memory-databases\">In-memory databases<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-memory-databases\"></a></h1>\n<p>Redis, Memcached\n<a href=\"/PublicPersonalKnowledgeBase/notes/r3sa76hN4TqZT6Pue9QCJ\">Redis and Memcached</a>\nwhen restarted, Memcached would reload state from disk or over network. Disk is used only for an appen0donly log, which we use in case of crash/resta</p>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1647507231129,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"db285659ccac8b133c384de1ef51de66","links":[],"anchors":{"welcome-to-stefans-notes":{"type":"header","text":"Welcome to Stefan's Notes!","value":"welcome-to-stefans-notes","line":7,"column":0,"depth":1}},"children":["mxzxxu8z4e6krz99ht96y9d","W1EOZ27Tqx6RbiA2aW3DI","DyoLE2kwm9rRfRZhBGxPW","idhfogizmtcmvaamtalp3o3","4w8wBCSRvYUnGIZeozW03","vB321AipYCs6ldVC0APs9","h6WVdl1UTWVXeWuMJSZ1f","bth6m0exy9q9loxib1mc4al","4abAmH56ausbldEJbZokx","JyOFJ5NTPSVWMfiDy951X","0OO7fjCpcaGZg5qDRZr8z","138666663","pohXgII67dAxnoufG7yAP","6hs48bnjnaoxahk07exj74u","42r6290iqzLPmg9BY7fIp","3hoLerNJHjNkDziIKlFF2","T6meT3UNw0nRorEbzoPSl","hIOTXIIBj3vmhG1xc91lA","tnFlQuOAGPkbU2fZI7Cb1","Jb3w3f4x8kixLhrjUW6S1","LV6q5jlD2xtCF6yYFEqFC","ENDcCZFjAW9h66eDoFg7I","b5IeREnsTbeggC7rmWV0p","2hmbhdzcdljtdwln762gcrv","z9la6u9t3xueldj2omf2gc6","9akeo93l6b026jmu4t6e7pw","sc24o4jglr9jg29qr5v0e44","0mt5ao8tbbz3z5mdwe0aer8","r7rvb6nal69nfb6ogqdadnm","xujx5iuxskj10o0ajpi109n","lyl1rzqz6zwcswpwh0kafrm","skpw697vlqdq3t3uqxpq5e3","a4tts3oc3oms7wuralrbzdc","13a1ufqh6o8yi9evw1u5kv5"],"parent":null,"data":{},"body":"# Welcome to Stefan's Notes!\n\n        \n\nLast updated: 2021.12.30\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/PublicPersonalKnowledgeBase","siteUrl":"https://petrovs12.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}