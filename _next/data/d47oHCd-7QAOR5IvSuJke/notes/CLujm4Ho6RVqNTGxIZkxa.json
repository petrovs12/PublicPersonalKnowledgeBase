{"pageProps":{"note":{"id":"CLujm4Ho6RVqNTGxIZkxa","title":"Algorithms","desc":"","updated":1676814536653,"created":1641811513625,"custom":{},"fname":"science.CS.Algorithms","type":"note","vault":{"fsPath":"vault"},"contentHash":"a7a69c7bf3bad2472bd14ffdea45b332","links":[{"type":"wiki","from":{"fname":"science.CS.Algorithms","id":"CLujm4Ho6RVqNTGxIZkxa","vaultName":"vault"},"value":"tags.TODO","alias":"#TODO","position":{"start":{"line":22,"column":1,"offset":288},"end":{"line":22,"column":6,"offset":293},"indent":[]},"xvault":false,"to":{"fname":"tags.TODO"}}],"anchors":{"leetcode-problems":{"type":"header","text":"Leetcode Problems","value":"leetcode-problems","line":8,"column":0,"depth":2},"1-two-sum":{"type":"header","text":"1. Two Sum","value":"1-two-sum","line":10,"column":0,"depth":3},"max-distance-to-closest-person":{"type":"header","text":"Max Distance to closest person","value":"max-distance-to-closest-person","line":26,"column":0,"depth":1},"word-pattern":{"type":"header","text":"Word Pattern","value":"word-pattern","line":42,"column":0,"depth":1},"783-minimum-distance-between-bst-nodes":{"type":"header","text":"783. Minimum Distance Between BST Nodes","value":"783-minimum-distance-between-bst-nodes","line":46,"column":0,"depth":1}},"children":[],"parent":"oVr3sAAVaKFFyV6eQ0I0E","data":{},"schema":{"schemaId":"ruyvpn5bngeinwshxuy7y19","moduleId":"science"}},"body":"<h1 id=\"algorithms\">Algorithms<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#algorithms\"></a></h1>\n<h2 id=\"leetcode-problems\">Leetcode Problems<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#leetcode-problems\"></a></h2>\n<h3 id=\"1-two-sum\"><a href=\"https://leetcode.com/problems/two-sum/\">1. Two Sum</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-two-sum\"></a></h3>\n<div class=\"mermaid\">\n  \ngraph TD;\na-->b;\n\n</div>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right\" columnspacing=\"\"><mtr><mtd class=\"mtr-glue\"></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>x</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd><mtd class=\"mtr-glue\"></mtd><mtd class=\"mml-eqn-num\"></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{align} x=2 \\end{align}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5em;vertical-align:-0.5em;\"></span><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span></span></span><span class=\"tag\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"eqn-num\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span></span></span></span></div>\n<h1 id=\"max-distance-to-closest-person\"><a href=\"https://leetcode.com/problems/maximize-distance-to-closest-person/\">Max Distance to closest person</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#max-distance-to-closest-person\"></a></h1>\n<p>Solved w/ O(n) space...\n<a class=\"color-tag\" style=\"--tag-color: #fbdd7e;\" href=\"/PublicPersonalKnowledgeBase/notes/vYWCmlO6WVQQZUTowUlHT\">#TODO</a>\nCheck this solution:</p>\n<p>2: Two Pointer [Accepted]\nIntuition</p>\n<p>As we iterate through seats, we'll update the closest person sitting to our left, and closest person sitting to our right.</p>\n<p>Algorithm</p>\n<p>Keep track of prev, the filled seat at or to the left of i, and future, the filled seat at or to the right of i.</p>\n<p>Then at seat i, the closest person is min(i - prev, future - i), with one exception. i - prev should be considered infinite if there is no person to the left of seat i, and similarly future - i is infinite if there is no one to the right of seat i.</p>\n<h1 id=\"word-pattern\"><a href=\"https://leetcode.com/problems/word-pattern/\">Word Pattern</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#word-pattern\"></a></h1>\n<p>Very stupid, solved w/ the 2 hash map approach</p>\n<h1 id=\"783-minimum-distance-between-bst-nodes\">783. Minimum Distance Between BST Nodes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#783-minimum-distance-between-bst-nodes\"></a></h1>\n<p>Solution- can walk over the tree, record thing\nin a array, sort it, return smallest diff.\nsimplest approach:\nwalk, push, heapsort while doing it, then walk.\nTAP_DANCE_ENABLE = yes\nQMK_SETTINGS = yes\nLTO_ENABLE = yes</p>\n<p>VIA_ENABLE = yes\nVIAL_ENABLE = yes</p>\n<p>in-order traversal, but the best one can be\n'rightmost' on one side,vs 'leftmost' on the other...</p>\n<p>So it's wrong...\nlets'a analyse a solution.\nuse in-order traversal, and while doing it,\nkeep track of the current and next,\nand update the best distance accordingly:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minDiffInBST</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>TreeNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        \n        self<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span> \n        self<span class=\"token punctuation\">.</span>minimum <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">:</span>\n                inorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>minimum <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span>val<span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>cur<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>cur <span class=\"token operator\">=</span> node\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n                inorder<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n        inorder<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>minimum\n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1647507231129,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"db285659ccac8b133c384de1ef51de66","links":[],"anchors":{"welcome-to-stefans-notes":{"type":"header","text":"Welcome to Stefan's Notes!","value":"welcome-to-stefans-notes","line":7,"column":0,"depth":1}},"children":["mxzxxu8z4e6krz99ht96y9d","W1EOZ27Tqx6RbiA2aW3DI","DyoLE2kwm9rRfRZhBGxPW","idhfogizmtcmvaamtalp3o3","4w8wBCSRvYUnGIZeozW03","vB321AipYCs6ldVC0APs9","h6WVdl1UTWVXeWuMJSZ1f","bth6m0exy9q9loxib1mc4al","4abAmH56ausbldEJbZokx","JyOFJ5NTPSVWMfiDy951X","0OO7fjCpcaGZg5qDRZr8z","138666663","pohXgII67dAxnoufG7yAP","6hs48bnjnaoxahk07exj74u","42r6290iqzLPmg9BY7fIp","3hoLerNJHjNkDziIKlFF2","T6meT3UNw0nRorEbzoPSl","hIOTXIIBj3vmhG1xc91lA","tnFlQuOAGPkbU2fZI7Cb1","Jb3w3f4x8kixLhrjUW6S1","LV6q5jlD2xtCF6yYFEqFC","ENDcCZFjAW9h66eDoFg7I","b5IeREnsTbeggC7rmWV0p","2hmbhdzcdljtdwln762gcrv","z9la6u9t3xueldj2omf2gc6","9akeo93l6b026jmu4t6e7pw","sc24o4jglr9jg29qr5v0e44","0mt5ao8tbbz3z5mdwe0aer8","r7rvb6nal69nfb6ogqdadnm","xujx5iuxskj10o0ajpi109n","lyl1rzqz6zwcswpwh0kafrm","skpw697vlqdq3t3uqxpq5e3","a4tts3oc3oms7wuralrbzdc","13a1ufqh6o8yi9evw1u5kv5"],"parent":null,"data":{},"body":"# Welcome to Stefan's Notes!\n\n        \n\nLast updated: 2021.12.30\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/PublicPersonalKnowledgeBase","siteUrl":"https://petrovs12.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"light","templateVersion":"0.97.0","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}